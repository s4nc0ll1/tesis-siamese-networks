# -*- coding: utf-8 -*-
"""Redes_siamesas_pruebas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xDqVP5gbZm1QECZ1fQqFY-UcMhaeAg0y
"""

#Installations needed
!pip install -U sentence-transformers
!pip install torch
!pip install datasets

#Libraries
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch
from sentence_transformers import SentenceTransformer, InputExample, losses, models, util
from torch.utils.data import DataLoader
from google.colab import drive
from datasets import Dataset

#Dataframe
# Mount Google Drive
drive.mount("/content/drive")

# Load data
columns =  ['CODIGO BMC','CODIGO CLIENTE','DESCRIPCION_CLIENTE','DESCRIPCION_BMC','DESCRIPCION_SUBYACENTE']
db = pd.read_excel("/content/drive/MyDrive/df_limpio_final.xlsx",names = columns)
db.head()

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_2')

# Unique BMC descriptions and their embeddings
unique_bmc_descriptions = db['DESCRIPCION_BMC'].unique()
unique_bmc_embeddings = model.encode(unique_bmc_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db['DESCRIPCION_CLIENTE'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_bmc_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_bmc_descriptions, index=db['DESCRIPCION_CLIENTE'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_bmc_descriptions = db['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_bmc_descriptions[i], top_match.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_is_Top'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_BMC', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_bmc_descriptions = db['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_bmc_descriptions[i], top_matches.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_in_Top3'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_BMC', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_3')

# Unique BMC descriptions and their embeddings
unique_bmc_descriptions = db['DESCRIPCION_BMC'].unique()
unique_bmc_embeddings = model.encode(unique_bmc_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db['DESCRIPCION_CLIENTE'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_bmc_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_bmc_descriptions, index=db['DESCRIPCION_CLIENTE'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_bmc_descriptions = db['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_bmc_descriptions[i], top_match.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_is_Top'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_BMC', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_bmc_descriptions = db['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_bmc_descriptions[i], top_matches.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_in_Top3'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_BMC', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_4')

# Unique BMC descriptions and their embeddings
unique_bmc_descriptions = db['DESCRIPCION_BMC'].unique()
unique_bmc_embeddings = model.encode(unique_bmc_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db['DESCRIPCION_CLIENTE'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_bmc_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_bmc_descriptions, index=db['DESCRIPCION_CLIENTE'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_bmc_descriptions = db['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_bmc_descriptions[i], top_match.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_is_Top'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_BMC', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_bmc_descriptions = db['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_bmc_descriptions[i], top_matches.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_in_Top3'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_BMC', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

"""#Tests with Subyacentes"""

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_3')

# Unique BMC descriptions and their embeddings
unique_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].unique()
unique_sub_embeddings = model.encode(unique_sub_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db['DESCRIPCION_CLIENTE'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_sub_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_sub_descriptions, index=db['DESCRIPCION_CLIENTE'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_sub_descriptions[i], top_match.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_is_Top'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_SUBYACENTE', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_sub_descriptions[i], top_matches.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_in_Top3'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_SUBYACENTE', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_2')

# Unique BMC descriptions and their embeddings
unique_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].unique()
unique_sub_embeddings = model.encode(unique_sub_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db['DESCRIPCION_CLIENTE'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_sub_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_sub_descriptions, index=db['DESCRIPCION_CLIENTE'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_sub_descriptions[i], top_match.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_is_Top'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_SUBYACENTE', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_sub_descriptions[i], top_matches.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_in_Top3'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_SUBYACENTE', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_4')

# Unique BMC descriptions and their embeddings
unique_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].unique()
unique_sub_embeddings = model.encode(unique_sub_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db['DESCRIPCION_CLIENTE'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_sub_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_sub_descriptions, index=db['DESCRIPCION_CLIENTE'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_sub_descriptions[i], top_match.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_is_Top'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_SUBYACENTE', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_sub_descriptions = db['DESCRIPCION_SUBYACENTE'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_sub_descriptions[i], top_matches.iloc[i]) for i in range(len(db))]

# Add the results to the original DataFrame or create a new DataFrame
db['Actual_in_Top3'] = results

# Print the head to see the results
print(db[['DESCRIPCION_CLIENTE', 'DESCRIPCION_SUBYACENTE', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

"""#Test with Sinthetic data"""

columns =  ['CODIGO BMC','CODIGO CLIENTE','DESCRIPCION_CLIENTE','DESCRIPCION_BMC','DESCRIPCIONES_SINTENTICAS']
db_sin = pd.read_excel("/content/drive/MyDrive/datos_sinteticos.xlsx",names = columns)
db_sin.head()

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_3')

# Unique BMC descriptions and their embeddings
unique_bmc_descriptions = db_sin['DESCRIPCION_BMC'].unique()
unique_bmc_embeddings = model.encode(unique_bmc_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db_sin['DESCRIPCIONES_SINTENTICAS'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_bmc_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_bmc_descriptions, index=db_sin['DESCRIPCIONES_SINTENTICAS'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_bmc_descriptions = db_sin['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_bmc_descriptions[i], top_match.iloc[i]) for i in range(len(db_sin))]

# Add the results to the original DataFrame or create a new DataFrame
db_sin['Actual_is_Top'] = results

# Print the head to see the results
print(db_sin[['DESCRIPCIONES_SINTENTICAS', 'DESCRIPCION_BMC', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_bmc_descriptions = db_sin['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_bmc_descriptions[i], top_matches.iloc[i]) for i in range(len(db_sin))]

# Add the results to the original DataFrame or create a new DataFrame
db_sin['Actual_in_Top3'] = results

# Print the head to see the results
print(db_sin[['DESCRIPCIONES_SINTENTICAS', 'DESCRIPCION_BMC', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Load the fine-tuned model
model = SentenceTransformer('/content/drive/MyDrive/fine_tuned_sbert_spanish_model_4')

# Unique BMC descriptions and their embeddings
unique_bmc_descriptions = db_sin['DESCRIPCION_BMC'].unique()
unique_bmc_embeddings = model.encode(unique_bmc_descriptions, convert_to_tensor=True)

# Compute embeddings for client descriptions
client_embeddings = model.encode(db_sin['DESCRIPCIONES_SINTENTICAS'].tolist(), convert_to_tensor=True)

# Compute cosine similarities only for unique BMC descriptions
cosine_similarities = util.cos_sim(client_embeddings, unique_bmc_embeddings)

# Create a DataFrame of cosine similarities with unique BMC descriptions as columns
similarity_df = pd.DataFrame(cosine_similarities.numpy(), columns=unique_bmc_descriptions, index=db_sin['DESCRIPCIONES_SINTENTICAS'].tolist())

# Find top match for each client description
top_match = similarity_df.idxmax(axis=1)

# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client
actual_bmc_descriptions = db_sin['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is the top match
def check_actual_is_top(actual, top):
    return actual == top

# Apply the function to each row
results = [check_actual_is_top(actual_bmc_descriptions[i], top_match.iloc[i]) for i in range(len(db_sin))]

# Add the results to the original DataFrame or create a new DataFrame
db_sin['Actual_is_Top'] = results

# Print the head to see the results
print(db_sin[['DESCRIPCIONES_SINTENTICAS', 'DESCRIPCION_BMC', 'Actual_is_Top']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")

# Find top 3 matches for each client description
top_matches = similarity_df.apply(lambda x: list(x.nlargest(3).index), axis=1)

# Check if the actual BMC description is in the top 3 matches
# Assuming 'DESCRIPCION_BMC' in your db DataFrame holds the actual BMC descriptions for each client description
actual_bmc_descriptions = db_sin['DESCRIPCION_BMC'].tolist()

# Create a function to check if actual description is in top matches
def check_actual_in_top(actual, top):
    return actual in top

# Apply the function to each row
results = [check_actual_in_top(actual_bmc_descriptions[i], top_matches.iloc[i]) for i in range(len(db_sin))]

# Add the results to the original DataFrame or create a new DataFrame
db_sin['Actual_in_Top3'] = results

# Print the head to see the results
print(db_sin[['DESCRIPCIONES_SINTENTICAS', 'DESCRIPCION_BMC', 'Actual_in_Top3']].head())

# Calculate the overall accuracy
accuracy = sum(results) / len(results) * 100
print(f"Accuracy: {accuracy:.2f}%")